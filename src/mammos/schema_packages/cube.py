#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)

import numpy as np
import pandas as pd
import plotly.express as px
from nomad.datamodel.data import (
    ArchiveSection,
    EntryData,
)
from nomad.datamodel.metainfo.plot import PlotlyFigure, PlotSection
from nomad.metainfo import (
    Package,
    Quantity,
    Section,
    SubSection,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Schema for cube.dat')


class Row(ArchiveSection):
    m_def = Section(
        a_eln={
            "properties": {
                "order": [
                    "time",
                    "H_ex",
                    "M",
                ]
            }
        },)

    M = Quantity(
        type=np.float64,
        description='Magnetisation',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        # unit="celsius",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `TemperatureRamp` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Cube(PlotSection, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    steps = SubSection(
        section_def=Row,
        repeats=True,
    )
    data_file = Quantity(
        type=str,
        description='The recipe file for the sintering process.',
        a_eln={
            "component": "FileEditQuantity",
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Cube` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)
        if self.data_file:
          with archive.m_context.raw_file(self.data_file) as file:
            df = pd.read_csv(file, sep=' ', header=0, names=['time', 'H_ex', 'M'])
          steps = []
          for i, row in df.iterrows():
            # print(row)
            step = Row()
            step.time = row['time']
            step.H_ex = row['H_ex']
            step.M = row['M']
            # step.duration = ureg.Quantity(float(row['duration [min]']), 'min')
            # step.initial_temperature = 
            #   ureg.Quantity(row['initial temperature [C]'], 'celsius')
            # step.final_temperature = 
            #   ureg.Quantity(row['final temperature [C]'], 'celsius')
            steps.append(step)
        self.steps = steps

        x = [s.H_ex for s in self.steps]
        y = [s.M for s in self.steps]
        figure2 = px.scatter(x=x, y=y, 
                             labels={
                                "x": "H_ex",
                                "y": "M"
                             },
                             title="Figure title")
        self.figures.append(PlotlyFigure(label='figure 1', index=1, 
                                         figure=figure2.to_plotly_json()))


m_package.__init_metainfo__()

        
